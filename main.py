import time
import requests
from requests.adapters import HTTPAdapter, Retry
from bs4 import BeautifulSoup
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode

import config
import config_memes as cfg
import buttons
import keyboards
from custom_filters import button_filter

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}  # key: user_id, value: "en" –∏–ª–∏ "ru"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
session = requests.Session()
retries = Retry(total=3, backoff_factor=1, status_forcelist=[500, 502, 503, 504])
session.mount('https://', HTTPAdapter(max_retries=retries))
session.mount('http://', HTTPAdapter(max_retries=retries))

bot = Client(
    name="my_bot",
    api_id=config.API_ID,
    api_hash=config.API_HASH,
    bot_token=config.BOT_TOKEN,
)


# === –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê ===
def search_kym(query: str) -> str:
    """–ü–æ–∏—Å–∫ –º–µ–º–∞ –Ω–∞ KnowYourMeme (EN) —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    try:
        url = cfg.KYM_SEARCH_URL.format(query=query)
        r = session.get(url, headers=cfg.HEADERS, timeout=30)
        soup = BeautifulSoup(r.text, "html.parser")

        first_result = soup.select_one(".entry_list a")
        if not first_result:
            return "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ <b>KnowYourMeme</b>."

        link = cfg.KYM_BASE_URL + first_result["href"]
        page = session.get(link, headers=cfg.HEADERS, timeout=30)
        soup = BeautifulSoup(page.text, "html.parser")

        title = soup.select_one("h1")
        summary = soup.select_one(".bodycopy")

        if not title or not summary:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å KnowYourMeme."

        text = summary.get_text(strip=True)[:cfg.MAX_TEXT_LENGTH] + "..."

        return f"üìñ <b>{title.get_text(strip=True)}</b>\n{text}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ KnowYourMeme: {e}"


def search_memepedia(query: str) -> str:
    """–ü–æ–∏—Å–∫ –º–µ–º–∞ –Ω–∞ Memepedia (RU) —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    try:
        url = cfg.MEMEPEDIA_SEARCH_URL.format(query=query)
        r = session.get(url, headers=cfg.HEADERS, timeout=30)
        soup = BeautifulSoup(r.text, "html.parser")

        first_result = soup.select_one(".entry-title a")
        if not first_result:
            return "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ <b>Memepedia</b>."

        link = first_result["href"]
        page = session.get(link, headers=cfg.HEADERS, timeout=30)
        soup = BeautifulSoup(page.text, "html.parser")

        title = soup.select_one("h1")
        summary = soup.select_one(".entry-content")

        if not title or not summary:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å Memepedia."

        text = summary.get_text(strip=True)[:cfg.MAX_TEXT_LENGTH] + "..."

        return f"üìñ <b>{title.get_text(strip=True)}</b>\n{text}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ Memepedia: {e}"


# === –•–ï–ù–î–õ–ï–†–´ ===
@bot.on_message(filters.command("start") | button_filter(buttons.back_button))
async def start_command(_, message: Message):
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–ø–∏—Å–∞–ª /start")
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –∏—Å–∫–∞—Ç—å –º–µ–º—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "<b>/time</b> ‚Äì —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ‚è∞\n"
        "<b>/meme_en &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äì –ø–æ–∏—Å–∫ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–≥–æ –º–µ–º–∞ üá∫üá∏\n"
        "<b>/meme_ru &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äì –ø–æ–∏—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ –º–µ–º–∞ üá∑üá∫\n",
        reply_markup=keyboards.main_keyboard,
        parse_mode=ParseMode.HTML
    )


@bot.on_message(filters.command("time") | button_filter(buttons.time_button))
async def time_command(_, message: Message):
    current_time = time.strftime("%H:%M:%S")
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—Ä–µ–º—è")
    await message.reply(
        f"‚è∞ –°–µ–π—á–∞—Å: <b>{current_time}</b>",
        reply_markup=keyboards.main_keyboard,
        parse_mode=ParseMode.HTML
    )


# === –ö–ù–û–ü–ö–ò –ú–ï–ú–û–í ===
@bot.on_message(button_filter(buttons.meme_en_button))
async def meme_en_button(_, message: Message):
    user_state[message.from_user.id] = "en"
    await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–≥–æ –º–µ–º–∞:", parse_mode=ParseMode.HTML)


@bot.on_message(button_filter(buttons.meme_ru_button))
async def meme_ru_button(_, message: Message):
    user_state[message.from_user.id] = "ru"
    await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –º–µ–º–∞:", parse_mode=ParseMode.HTML)


# === –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ú–ï–ú–ê ===
@bot.on_message()
async def handle_meme_text(_, message: Message):
    uid = message.from_user.id
    if uid not in user_state:
        return

    query = message.text.strip()
    await message.reply("‚è≥ –ò—â—É –º–µ–º, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    if user_state[uid] == "en":
        result = search_kym(query)
    else:
        result = search_memepedia(query)

    await message.reply(result, parse_mode=ParseMode.HTML)
    user_state.pop(uid)


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.run()
