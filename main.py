import asyncio
from aiohttp import ClientSession, ClientTimeout
from bs4 import BeautifulSoup
from difflib import SequenceMatcher
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums import ParseMode

import config
import config_memes as cfg
import buttons
import keyboards
from custom_filters import button_filter

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}  # key: user_id, value: {"lang": "en"/"ru", "suggestions": [...]}

bot = Client(
    name="my_bot",
    api_id=config.API_ID,
    api_hash=config.API_HASH,
    bot_token=config.BOT_TOKEN,
)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def similar(a, b):
    return SequenceMatcher(None, a.lower(), b.lower()).ratio()

def clean_text(block):
    if not block:
        return ""
    for a in block.find_all("a"):
        a.replace_with(a.get_text())
    return block.get_text(strip=True)

async def fetch_html(session, url):
    try:
        async with session.get(url, headers=cfg.HEADERS, timeout=ClientTimeout(total=10)) as resp:
            return await resp.text()
    except:
        return None

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –º–µ–º–æ–≤ ===
async def search_kym(query: str):
    url = cfg.KYM_SEARCH_URL.format(query=query)
    async with ClientSession() as session:
        html = await fetch_html(session, url)
        if not html:
            return None
        soup = BeautifulSoup(html, "html.parser")
        results = soup.select(".entry_list a")[:10]
        if not results:
            return []

        for r_item in results:
            if r_item.get_text(strip=True).lower() == query.lower():
                link = cfg.KYM_BASE_URL + r_item["href"]
                page_html = await fetch_html(session, link)
                if not page_html:
                    return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–º–∞ –Ω–∞ KYM."
                soup_page = BeautifulSoup(page_html, "html.parser")
                summary_block = soup_page.select_one(".bodycopy")
                summary_text = clean_text(summary_block)[:cfg.MAX_TEXT_LENGTH] + "..." if summary_block else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                title = soup_page.select_one("h1")
                title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                return f"üìñ <b>{title_text}</b>\n{summary_text}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"

        threshold = 0.2
        suggestions = [{"title": r.get_text(strip=True), "href": r["href"]} for r in results]
        suggestions = [s for s in suggestions if similar(s["title"], query) >= threshold]
        suggestions.sort(key=lambda s: similar(s["title"], query), reverse=True)
        return suggestions

async def search_memepedia(query: str):
    url = cfg.MEMEPEDIA_SEARCH_URL.format(query=query)
    async with ClientSession() as session:
        html = await fetch_html(session, url)
        if not html:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Memepedia."
        soup = BeautifulSoup(html, "html.parser")
        results = soup.select(".entry-title a")[:10]
        if not results:
            return "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Memepedia."

        for r_item in results:
            if r_item.get_text(strip=True).lower() == query.lower():
                link = r_item["href"]
                page_html = await fetch_html(session, link)
                if not page_html:
                    return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–º–∞ –Ω–∞ Memepedia."
                soup_page = BeautifulSoup(page_html, "html.parser")
                content_block = soup_page.select_one(".entry-content")
                summary_text = clean_text(content_block)[:cfg.MAX_TEXT_LENGTH] + "..." if content_block else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                title = soup_page.select_one("h1")
                title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                return f"üìñ <b>{title_text}</b>\n{summary_text}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"

        threshold = 0.2
        suggestions = [{"title": r.get_text(strip=True), "href": r["href"]} for r in results]
        suggestions = [s for s in suggestions if similar(s["title"], query) >= threshold]
        suggestions.sort(key=lambda s: similar(s["title"], query), reverse=True)
        return suggestions

# === –•–ï–ù–î–õ–ï–†–´ ===
@bot.on_message(filters.command("start") | button_filter(buttons.back_button))
async def start_command(_, message: Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–º–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "<b>/time</b> ‚Äì —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ‚è∞\n"
        "<b>/meme_en &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äì –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –º–µ–º üá∫üá∏\n"
        "<b>/meme_ru &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äì —Ä—É—Å—Å–∫–∏–π –º–µ–º üá∑üá∫\n",
        reply_markup=keyboards.main_keyboard,
        parse_mode=ParseMode.HTML
    )

@bot.on_message(filters.command("time") | button_filter(buttons.time_button))
async def time_command(_, message: Message):
    current_time = time.strftime("%H:%M:%S")
    await message.reply(f"‚è∞ –°–µ–π—á–∞—Å: <b>{current_time}</b>", reply_markup=keyboards.main_keyboard, parse_mode=ParseMode.HTML)

@bot.on_message(button_filter(buttons.meme_en_button))
async def meme_en_button(_, message: Message):
    user_state[message.from_user.id] = {"lang": "en"}
    await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–≥–æ –º–µ–º–∞:", parse_mode=ParseMode.HTML)

@bot.on_message(button_filter(buttons.meme_ru_button))
async def meme_ru_button(_, message: Message):
    user_state[message.from_user.id] = {"lang": "ru"}
    await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –º–µ–º–∞:", parse_mode=ParseMode.HTML)

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ú–ï–ú–ê ===
@bot.on_message()
async def handle_meme_text(_, message: Message):
    uid = message.from_user.id
    if uid not in user_state:
        return

    state = user_state[uid]
    query = message.text.strip()
    await message.reply("‚è≥ –ò—â—É –º–µ–º...")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if "suggestions" in state:
        for s in state["suggestions"]:
            if similar(s["title"], query) > 0.7:
                link = cfg.KYM_BASE_URL + s["href"] if state["lang"] == "en" else s["href"]
                async with ClientSession() as session:
                    page_html = await fetch_html(session, link)
                soup_page = BeautifulSoup(page_html, "html.parser")
                content_block = soup_page.select_one(".bodycopy" if state["lang"] == "en" else ".entry-content")
                summary_text = clean_text(content_block)[:cfg.MAX_TEXT_LENGTH] + "..." if content_block else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                title = soup_page.select_one("h1")
                title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                await message.reply(f"üìñ <b>{title_text}</b>\n{summary_text}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>", parse_mode=ParseMode.HTML)
                user_state.pop(uid)
                return

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if state["lang"] == "en":
        result = await search_kym(query)
        if result is None or result == []:
            result = await search_memepedia(query)
    else:
        result = await search_memepedia(query)

    if isinstance(result, list) and len(result) > 0:
        user_state[uid]["suggestions"] = result
        suggest_text = "\n".join([f"- {s['title']}" for s in result])
        await message.reply(f"ü§î –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n{suggest_text}", parse_mode=ParseMode.HTML)
    else:
        await message.reply(result, parse_mode=ParseMode.HTML)
        user_state.pop(uid)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.run()
