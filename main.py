import time
import requests
from bs4 import BeautifulSoup
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

import config
import config_memes as cfg
import buttons
import keyboards
from custom_filters import button_filter


bot = Client(
    name="my_bot",
    api_id=config.API_ID,
    api_hash=config.API_HASH,
    bot_token=config.BOT_TOKEN,
)


# === –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê ===
def search_kym(query: str) -> str:
    """–ü–æ–∏—Å–∫ –º–µ–º–∞ –Ω–∞ KnowYourMeme (EN)."""
    try:
        url = cfg.KYM_SEARCH_URL.format(query=query)
        r = requests.get(url, headers=cfg.HEADERS, timeout=cfg.REQUEST_TIMEOUT)
        soup = BeautifulSoup(r.text, "html.parser")

        first_result = soup.select_one(".entry_list a")
        if not first_result:
            return "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ <b>KnowYourMeme</b>."

        link = cfg.KYM_BASE_URL + first_result["href"]
        page = requests.get(link, headers=cfg.HEADERS, timeout=cfg.REQUEST_TIMEOUT)
        soup = BeautifulSoup(page.text, "html.parser")

        title = soup.select_one("h1").get_text(strip=True)
        summary = soup.select_one(".bodycopy").get_text(strip=True)[:cfg.MAX_TEXT_LENGTH] + "..."

        return f"üìñ <b>{title}</b>\n{summary}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ KnowYourMeme: {e}"


def search_memepedia(query: str) -> str:
    """–ü–æ–∏—Å–∫ –º–µ–º–∞ –Ω–∞ Memepedia (RU)."""
    try:
        url = cfg.MEMEPEDIA_SEARCH_URL.format(query=query)
        r = requests.get(url, headers=cfg.HEADERS, timeout=cfg.REQUEST_TIMEOUT)
        soup = BeautifulSoup(r.text, "html.parser")

        first_result = soup.select_one(".entry-title a")
        if not first_result:
            return "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ <b>Memepedia</b>."

        link = first_result["href"]
        page = requests.get(link, headers=cfg.HEADERS, timeout=cfg.REQUEST_TIMEOUT)
        soup = BeautifulSoup(page.text, "html.parser")

        title = soup.select_one("h1").get_text(strip=True)
        summary = soup.select_one(".entry-content").get_text(strip=True)[:cfg.MAX_TEXT_LENGTH] + "..."

        return f"üìñ <b>{title}</b>\n{summary}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ Memepedia: {e}"


# === –•–ï–ù–î–õ–ï–†–´ ===
@bot.on_message(filters.command("start") | button_filter(buttons.back_button))
async def start_command(_, message: Message):
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–ø–∏—Å–∞–ª /start")
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –∏—Å–∫–∞—Ç—å –º–µ–º—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "<b>/time</b> ‚Äì —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ‚è∞\n"
        "<b>/meme_en &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äì –ø–æ–∏—Å–∫ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–≥–æ –º–µ–º–∞ üá∫üá∏\n"
        "<b>/meme_ru &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äì –ø–æ–∏—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ –º–µ–º–∞ üá∑üá∫\n",
        reply_markup=keyboards.main_keyboard,
        parse_mode=ParseMode.HTML
    )


@bot.on_message(filters.command("time") | button_filter(buttons.time_button))
async def time_command(_, message: Message):
    current_time = time.strftime("%H:%M:%S")
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—Ä–µ–º—è")
    await message.reply(
        f"‚è∞ –°–µ–π—á–∞—Å: <b>{current_time}</b>",
        reply_markup=keyboards.main_keyboard,
        parse_mode=ParseMode.HTML
    )


@bot.on_message(filters.command("meme_en"))
async def meme_en_command(_, message: Message):
    query = " ".join(message.text.split()[1:])
    if not query:
        await message.reply(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–º–∞: <b>/meme_en rickroll</b>",
            parse_mode=ParseMode.HTML
        )
        return
    print(f"[LOG] –ü–æ–∏—Å–∫ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–≥–æ –º–µ–º–∞: {query}")
    result = search_kym(query)
    await message.reply(result, parse_mode=ParseMode.HTML)


@bot.on_message(filters.command("meme_ru"))
async def meme_ru_command(_, message: Message):
    query = " ".join(message.text.split()[1:])
    if not query:
        await message.reply(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–º–∞: <b>/meme_ru –∂–∞–±–∫–∞</b>",
            parse_mode=ParseMode.HTML
        )
        return
    print(f"[LOG] –ü–æ–∏—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ –º–µ–º–∞: {query}")
    result = search_memepedia(query)
    await message.reply(result, parse_mode=ParseMode.HTML)


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.run()

