import time
import requests
from requests.adapters import HTTPAdapter, Retry
from bs4 import BeautifulSoup
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode

import config
import config_memes as cfg
import buttons
import keyboards
from custom_filters import button_filter

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}
# key: user_id
# value: {"lang": "en"/"ru", "suggestions": [{"title":..., "href":...}]}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
session = requests.Session()
retries = Retry(total=1, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])
session.mount('https://', HTTPAdapter(max_retries=retries))
session.mount('http://', HTTPAdapter(max_retries=retries))

bot = Client(
    name="my_bot",
    api_id=config.API_ID,
    api_hash=config.API_HASH,
    bot_token=config.BOT_TOKEN,
)

# === –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê ===
def search_kym(query: str):
    """–ü–æ–∏—Å–∫ –º–µ–º–∞ –Ω–∞ KnowYourMeme (EN) —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏ —Ç–æ—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º."""
    try:
        url = cfg.KYM_SEARCH_URL.format(query=query)
        r = session.get(url, headers=cfg.HEADERS, timeout=7)
        soup = BeautifulSoup(r.text, "html.parser")

        results = soup.select(".entry_list a")[:5]
        if not results:
            return "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ <b>KnowYourMeme</b>."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for r_item in results:
            if r_item.get_text(strip=True).lower() == query.lower():
                link = cfg.KYM_BASE_URL + r_item["href"]
                page = session.get(link, headers=cfg.HEADERS, timeout=7)
                soup_page = BeautifulSoup(page.text, "html.parser")
                title = soup_page.select_one("h1")
                summary = soup_page.select_one(".bodycopy")

                title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                summary_text = summary.get_text(strip=True)[:cfg.MAX_TEXT_LENGTH] + "..." if summary else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

                return f"üìñ <b>{title_text}</b>\n{summary_text}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Üí —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        suggestions_list = [{"title": r.get_text(strip=True), "href": r["href"]} for r in results]
        return suggestions_list
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ KnowYourMeme: {e}"


def search_memepedia(query: str):
    """–ü–æ–∏—Å–∫ –º–µ–º–∞ –Ω–∞ Memepedia (RU) —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞."""
    try:
        url = cfg.MEMEPEDIA_SEARCH_URL.format(query=query)
        r = session.get(url, headers=cfg.HEADERS, timeout=7)
        soup = BeautifulSoup(r.text, "html.parser")

        results = soup.select(".entry-title a")[:5]
        if not results:
            return "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ <b>Memepedia</b>."

        for r_item in results:
            if r_item.get_text(strip=True).lower() == query.lower():
                link = r_item["href"]
                page = session.get(link, headers=cfg.HEADERS, timeout=7)
                soup_page = BeautifulSoup(page.text, "html.parser")
                title = soup_page.select_one("h1")
                summary = soup_page.select_one(".entry-content")

                title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                summary_text = summary.get_text(strip=True)[:cfg.MAX_TEXT_LENGTH] + "..." if summary else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

                return f"üìñ <b>{title_text}</b>\n{summary_text}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"

        # –µ—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç ‚Üí —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        suggestions_list = [{"title": r.get_text(strip=True), "href": r["href"]} for r in results]
        return suggestions_list
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ Memepedia: {e}"


# === –•–ï–ù–î–õ–ï–†–´ ===
@bot.on_message(filters.command("start") | button_filter(buttons.back_button))
async def start_command(_, message: Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –∏—Å–∫–∞—Ç—å –º–µ–º—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "<b>/time</b> ‚Äì —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ‚è∞\n"
        "<b>/meme_en &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äì –ø–æ–∏—Å–∫ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–≥–æ –º–µ–º–∞ üá∫üá∏\n"
        "<b>/meme_ru &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äì –ø–æ–∏—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ –º–µ–º–∞ üá∑üá∫\n",
        reply_markup=keyboards.main_keyboard,
        parse_mode=ParseMode.HTML
    )


@bot.on_message(filters.command("time") | button_filter(buttons.time_button))
async def time_command(_, message: Message):
    current_time = time.strftime("%H:%M:%S")
    await message.reply(
        f"‚è∞ –°–µ–π—á–∞—Å: <b>{current_time}</b>",
        reply_markup=keyboards.main_keyboard,
        parse_mode=ParseMode.HTML
    )


# === –ö–ù–û–ü–ö–ò –ú–ï–ú–û–í ===
@bot.on_message(button_filter(buttons.meme_en_button))
async def meme_en_button(_, message: Message):
    user_state[message.from_user.id] = {"lang": "en"}
    await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–≥–æ –º–µ–º–∞:", parse_mode=ParseMode.HTML)


@bot.on_message(button_filter(buttons.meme_ru_button))
async def meme_ru_button(_, message: Message):
    user_state[message.from_user.id] = {"lang": "ru"}
    await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –º–µ–º–∞:", parse_mode=ParseMode.HTML)


# === –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ú–ï–ú–ê ===
@bot.on_message()
async def handle_meme_text(_, message: Message):
    uid = message.from_user.id
    if uid not in user_state:
        return

    state = user_state[uid]
    query = message.text.strip()
    await message.reply("‚è≥ –ò—â—É –º–µ–º, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚Üí —ç—Ç–æ –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if "suggestions" in state:
        for s in state["suggestions"]:
            if s["title"].lower() == query.lower():
                link = cfg.KYM_BASE_URL + s["href"] if state["lang"] == "en" else s["href"]
                page = session.get(link, headers=cfg.HEADERS, timeout=7)
                soup_page = BeautifulSoup(page.text, "html.parser")
                title = soup_page.select_one("h1")
                summary = soup_page.select_one(".bodycopy" if state["lang"] == "en" else ".entry-content")

                title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                summary_text = summary.get_text(strip=True)[:cfg.MAX_TEXT_LENGTH] + "..." if summary else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

                await message.reply(f"üìñ <b>{title_text}</b>\n{summary_text}\n\nüîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>", parse_mode=ParseMode.HTML)
                user_state.pop(uid)
                return
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    # –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    result = search_kym(query) if state["lang"] == "en" else search_memepedia(query)

    if isinstance(result, list):  # –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        user_state[uid]["suggestions"] = result
        suggest_text = "\n".join([f"- {s['title']}" for s in result])
        await message.reply(f"ü§î –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n{suggest_text}", parse_mode=ParseMode.HTML)
    else:
        await message.reply(result, parse_mode=ParseMode.HTML)
        user_state.pop(uid)


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.run()
